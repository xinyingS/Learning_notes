Http status

Reference from: https://github.com/CyC2018/Interview-Notebook/blob/master/notes/HTTP.md#%E4%B8%80-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5

1XX         Informational       接收的请求正在处理
2XX         Success             请求正常处理完毕
3XX         Redirection         需要进行附加操作以完成请求
4XX         Client Error        服务器无法处理请求
5XX         Server Error        服务器处理请求出错


100 Continue: 表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。



200 OK
204 No Content: 请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。
206 Partial Content: 表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容。



301 Moved Permanently: 永久性重定向
302 Found: 临时性重定向
303 See Other: 和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。
注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。

304 Not Modified: 如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。
307 Temporary Redirect: 临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。



400 Bad Request: 请求报文中存在语法错误。
401 Unauthorized: 该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。
403 Forbidden: 请求被拒绝，服务器端没有必要给出拒绝的详细理由。
404 Not Found:

500 Internal Server Error: 服务器正在执行请求时发生错误。
503 Service Unavilable: 服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。


----------------------------------

TCP

Reference from: https://wdxtub.com/interview/14520847385821.html
                https://blog.csdn.net/qq_18425655/article/details/52163228

1. TCP的特性
   提供面向连接的，可靠的字节流。

   SYN: Synchronize Sequence Number
   Seq: Sequence Number 序列号
   ACKnum: Acknoledgement Number 确认序列号
   2MSL: 2 Maximum Segment Lifetime 两个最大段生命周期
2. Three-way handshake
   所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包.

   三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，
   客户端执行 connect() 时。将触发三次握手。

   * 第一次握手(SYN=1, seq=x):
     客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。
     发送完毕后，客户端进入 SYN_SEND 状态

   * 第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):
     服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。
     发送完毕后，服务器端进入 SYN_RCVD 状态。

   * 第三次握手(ACK=1，ACKnum=y+1)
     客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1
     发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。

3. Four-way handshake
   TCP的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close() 操作即可产生挥手操作。

   * 第一次挥手(FIN=1，seq=x)
     假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。
     发送完毕后，客户端进入 FIN_WAIT_1 状态。

   * 第二次挥手(ACK=1，ACKnum=x+1)
     服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。
     发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。

   * 第三次挥手(FIN=1，seq=y)
     服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。
     发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。

   * 第四次挥手(ACK=1，ACKnum=y+1)
     客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。
     服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。
     客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。

4. 为什么是三次握手而不是两次？

   现假定一种异常情况，即A发出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达B。本来这是一个失效的报文段。但B收到此失效的连接请求报文段后，
   就误认为是A又发出一次新的连接请求。于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了。
   由于现在A并没有发出建立连接的请求，因此不会理睬B的确认，也不会向B发送数据。但B却以为新的运输连接已经建立了，并一直等待A发来数据。B的许多资源就白白浪费了。
   三次握手，A不会向B的确认发出确认。B由于收不到确认，就知道A并没有要求建立连接。

5. 为什么TCP的第四次挥手必须等待2MSL呢？
  （1）为了保证客户端发送的最后一个ACK报文段能够到达服务器。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间等待计时器。
     最后客户端和服务器都能正常的关闭。
     假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。

  （2）他还可以防止已失效的报文段。客户端在发送最后一个ACK之后，再经过经过2MSL，就可以使本链接持续时间内所产生的所有报文段都从网络中消失。从保证在关闭连接后不会有还在网络中滞留的报文段去骚扰服务器。

6. 为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？
   虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。

7. 为什么连接的时候是三次握手，关闭的时候却是四次握手？
   因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，
   告诉Client端，"你发的FIN报文我收到了"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。

8. 什么是2MSL
   MSL是Maximum Segment Lifetime,译为“报文最大生存时间”，他是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。
   因为TCP报文（segment）是IP数据报（datagram）的数据部分，而IP头中有一个TTL域，TTL是time to live的缩写，中文可以译为“生存时间”，这个生存时间是由源主机设置初始值但不是存的具体时间，而是存储了一个IP数据报可以经过的最大路由数，
   每经过一个处理他的路由器此值就减1，当此值为0则数据报将被丢弃，同时发送ICMP报文通知源主机。
   RFC 793中规定MSL为2分钟，实际应用中常用的是30秒，1分钟和2分钟等
   2MSL即两倍的MSL，TCP的TIME_WAIT状态也称为2MSL等待状态，当TCP的一端发起主动关闭，在发出最后一个ACK包后，即第3次握手完成后发送了第四次握手的ACK包后就进入了TIME_WAIT状态，必须在此状态上停留两倍的MSL时间。
   等待2MSL时间主要目的是怕最后一个ACK包对方没收到，那么对方在超时后将重发第三次握手的FIN包，主动关闭端接到重发的FIN包后可以再发一个ACK应答包。
   在TIME_WAIT状态时两端的端口不能使用，要等到2MSL时间结束才可继续使用。
   当连接处于2MSL等待阶段时任何迟到的报文段都将被丢弃。不过在实际应用中可以通过设置SO_REUSEADDR选项达到不必等待2MSL时间结束再使用此端口。

   TTL与MSL是有关系的但不是简单的相等的关系，MSL要大于等于TTL。
