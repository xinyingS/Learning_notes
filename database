DB && ADB

一. DB
   (1) Database System Architecture - data abstraction; data independence.
   (2) Relational Databases - Relational data model; SQL.
   (3) Database design - Entity-relationship model, functional dependencies; normal forms; dependency preservation; information loss.
   (4) Introduction to OLAP - Multidimensional data model, data aggregation.
   (5) Storage Strategies - Indices and B-trees.
   (6) Transaction Management - ACID properties, concurrency control and recovery.

1. Relational Database -> a set of relations (relation -> a set of rows or tuples)
   (1) instance: a table with rows and columns
   (2) schema: name and type of each column.

2. SQL -> DDL -> Create/ Drop/ alter...
          DML (Data manipulation language) -> select from where...

3. Integrity Constraints(ICs)
   IC: condition that must be true for any instance of the database. eg: domain constraints
       ICs are specified when schema is defined.
       ICs are checked when relations are modified.
   A legal instance of a relation is one that satisfies all specified ICs.

   (1) Primary key constraints
   (2) Candidate key -> "UNIQUE"   candidate key choose one to be primary key.
   (3) Foreign key
   (4) Referential Integrity:
       -> delete/ update
         a. Default is NO ACTION(delete/ update is rejected)
         b. CASCADE(also delete all tuples that refer to deleted tuple)
         c. SET NULL/ SET DEFAULT(set foreign key value of referencing tuple)
  (5) Domain constraints: Field values must be of right types.
  (6) General constraints: Check...

4. SQL
   (1) LIKE is used for string matching. "_" stands for any one character and "%" stands for 0 or more
       arbitrary characters.
   (2) UNION -> function as OR 并集
          SELECT S.sid
          FROM Sailors S, Boats B, Reserves R
          WHERE S.sid=R.sid AND R.bid=B.bid
                AND (B.color=‘red’ OR B.color=‘green’

          The same as:

          SELECT S.sid
          FROM Sailors S, Boats B, Reserves R
          WHERE S.sid=R.sid AND R.bid=B.bid
                AND B.color=‘red’
          UNION
          SELECT S.sid
          FROM Sailors S, Boats B, Reserves R
          WHERE S.sid=R.sid AND R.bid=B.bid
                AND B.color=‘green’
  (3) INTERSECT -> function as AND 交集
          ...
  (4) Nested queries -> ppt example
      IN, EXISTS, UNIQUE, NOT IN, NOT EXISTS, NOT UNIQUE, ANY, ALL

      (EXISTS(table) -> true, if table not empty)
      (Unique(table) -> table not have duplicates)
      (Not UNIQUE(table) -> more than...)
      (> ANY -> some)
      (>= ALL -> greater than anyone else)

  (5) Aggregate Operators ->
      COUNT(*)
      COUNT([DISTINCT] A)
      SUM([DISTINCT] A)
      AVG([DISTINCT] A)
      MAX(A)
      MIN(A)
      -> attribute function

  (6) Group by ->
      SELECT  [DISTINCT] target-list (attribute names must be a subset of grouping- list)
      FROM     relation- list
      WHERE    qualification
      GROUP BY  grouping- list
      HAVING    group- qualification (eliminate some groups/ single value per group)

      (group by and having is a pair)

  (7) 内连接：指连接结果仅包含符合连接条件的行，参与连接的两个表都应该符合连接条件。
      外连接：连接结果不仅包含符合连接条件的行同时也包含自身不符合条件的行。包括左外连接、右外连接和全外连接。

  (8) 查看表结构 -> desc/ describe table_name

5. View
   Create view ...
   as select ...

   -> Drop view

6. Triggers
   -> Procedure that starts automatically if specified changes occur to DBMS.

   a. Event(activates the trigger)
   b. Condition(tests whether the triggers should run)
   c. Action(what happens if the trigger runs)

7. Schema refinement and normal forms
  (1) Redundancy:
      – Data for branch-name, branch-city, assets are repeated for each loan
        that a branch makes
      – Wastes space
      – Complicates updating, introducing possibility of inconsistency of
        assets value
  (2) Null values
      – Cannot store information about a branch if no loans exist
      – Can use null values, but they are difficult to handle

8. Functional Dependencies (FDs)
  (1) An FD is a statement about all allowable relations.
  (2) K is a candidate key for R means that K -> R.
      However, K -> R does not require K to be minimal.
      (-> means determines)
  (3) Armstrong’s Axioms (X, Y, Z are sets of attributes):
      – Reflexivity: If Y X, then X Y
      – Augmentation: If X Y, then XZ YZ for any Z
      – Transitivity: If X Y and Y Z, then X Z

      Couple of additional rules (that follow from AA):
      – Union: If X Y and X Z, then X YZ
      – Decomposition: If X YZ, then X Y and X Z

9.  Schema Refinement

tables --------------------> Better  tables
       Decomposition           less Redundancy
       Normalization
